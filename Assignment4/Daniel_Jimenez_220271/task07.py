# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pr7WZkBsc2I0EyBMqRZt08asqAUHsQUN

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

result = [] #list of tuples
for cls in g.subjects(RDF.type, RDFS.Class):
    superclass = None
    for sup in g.objects(cls, RDFS.subClassOf):
        superclass = sup
    result.append((cls, superclass))

# Visualize the results
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
SELECT ?c ?sc
WHERE {
  ?c rdf:type rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")
def get_subclasses(cls):
    subclasses = set()
    for s in g.subjects(RDFS.subClassOf, cls):
        subclasses.add(s)
        subclasses |= get_subclasses(s)
    return subclasses

person_classes = {ns.Person} | get_subclasses(ns.Person)
# variable to return
individuals = []
for cls in person_classes:
    for ind in g.subjects(RDF.type, cls):
        individuals.append(ind)
# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
SELECT DISTINCT ?ind
WHERE {
  ?ind rdf:type ?class .
  ?class rdfs:subClassOf* <http://oeg.fi.upm.es/def/people#Person> .
} """

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query =  """
SELECT DISTINCT ?name ?type
WHERE {
  ?x ?rel <http://oeg.fi.upm.es/def/people#Rocky> .
  FILTER(?rel IN (<http://oeg.fi.upm.es/def/people#knows>, <http://oeg.fi.upm.es/def/people#ownsPet>)) .
  OPTIONAL { ?x <http://oeg.fi.upm.es/def/people#hasName> ?hasName . }
  OPTIONAL { ?x <http://www.w3.org/2000/01/rdf-schema#label> ?label . }
  BIND(COALESCE(?hasName, ?label) AS ?name)
  ?x rdf:type ?type .
}
"""

# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
SELECT DISTINCT ?name
WHERE {
  {
    # Caso 1: tiene un compañero que posee un perro
    ?x <http://oeg.fi.upm.es/def/people#hasColleague> ?y .
    ?y <http://oeg.fi.upm.es/def/people#ownsPet> ?dog .
    ?dog rdf:type <http://oeg.fi.upm.es/def/people#Animal> .
  }
  UNION
  {
    # Caso 2: tiene un compañero que tiene un compañero que posee un perro
    ?x <http://oeg.fi.upm.es/def/people#hasColleague> ?y .
    ?y <http://oeg.fi.upm.es/def/people#hasColleague> ?z .
    ?z <http://oeg.fi.upm.es/def/people#ownsPet> ?dog .
    ?dog rdf:type <http://oeg.fi.upm.es/def/people#Animal> .
  }

  OPTIONAL { ?x <http://oeg.fi.upm.es/def/people#hasName> ?hasName . }
  OPTIONAL { ?x <http://www.w3.org/2000/01/rdf-schema#label> ?label . }
  BIND(COALESCE(?hasName, ?label) AS ?name)
}
"""
for r in g.query(query):
  print(r.name)

# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")